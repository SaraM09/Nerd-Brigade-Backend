// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  phone     String?
  address   String?
  bookings  Booking[]
  cart      Cart?    // Each user has zero or one cart
}

model Cart {
  id         Int        @id @default(autoincrement())
  userId     Int        @unique  // Foreign key reference to User, must be unique
  user       User       @relation(fields: [userId], references: [id])
  items      CartItem[]
}

model CartItem {
  id          Int       @id @default(autoincrement())
  cartId      Int       // Foreign key reference to Cart
  accessoryId Int       // Foreign key reference to Accessory
  accessory   Accessory @relation(fields: [accessoryId], references: [id])
  quantity    Int
  cart        Cart      @relation(fields: [cartId], references: [id])
}

model Booking {
  id               Int       @id @default(autoincrement())
  userId           Int       // Foreign key reference to User
  technicianId     Int?      // Optional if no technician is assigned yet
  serviceType      String
  issueDescription String
  status           String
  scheduledDate    DateTime
  costEstimate     Float?
  user             User      @relation(fields: [userId], references: [id])
  technician       Technician? @relation(fields: [technicianId], references: [id])
}

model Technician {
  id              Int       @id @default(autoincrement())
  name            String
  contactInfo     String?
  specialization  String?
  bookings        Booking[]
}

model Accessory {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String?  
  cartItems   CartItem[] // Relation to CartItem for inventory management
}

